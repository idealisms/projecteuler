open Hashtbl;;
open Printf;;

let triangle =
[[75; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1];
 [95; 64; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1];
 [17; 47; 82; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1];
 [18; 35; 87; 10; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1];
 [20; 04; 82; 47; 65; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1];
 [19; 01; 23; 75; 03; 34; -1; -1; -1; -1; -1; -1; -1; -1; -1];
 [88; 02; 77; 73; 07; 63; 67; -1; -1; -1; -1; -1; -1; -1; -1];
 [99; 65; 04; 28; 06; 16; 70; 92; -1; -1; -1; -1; -1; -1; -1];
 [41; 41; 26; 56; 83; 40; 80; 70; 33; -1; -1; -1; -1; -1; -1];
 [41; 48; 72; 33; 47; 32; 37; 16; 94; 29; -1; -1; -1; -1; -1];
 [53; 71; 44; 65; 25; 43; 91; 52; 97; 51; 14; -1; -1; -1; -1];
 [70; 11; 33; 28; 77; 73; 17; 78; 39; 68; 17; 57; -1; -1; -1];
 [91; 71; 52; 38; 17; 14; 91; 43; 58; 50; 27; 29; 48; -1; -1];
 [63; 66; 04; 68; 89; 53; 67; 30; 73; 16; 69; 87; 40; 31; -1];
 [04; 62; 98; 27; 23; 09; 70; 98; 73; 93; 38; 53; 60; 04; 23]]
;;

let rec maxRoute row offset =
  let cur = List.nth (List.nth triangle row) offset
  in
    (* We could memoize here, but who cares if the search space is only 16k *)
    if row = (List.length triangle) - 1 then
      cur
    else
      max (cur + (maxRoute (row + 1) offset))
          (cur + (maxRoute (row + 1) (offset + 1)))
;;

Printf.printf "%d\n" (maxRoute 0 0);;
